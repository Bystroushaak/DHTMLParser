D Module for parsing HTML in similar way like BeautifulSoup.

Version: 0.6.0
Date:    08.08.2011
Authors: Bystroushaak (bystrousak@kitakitsune.org)
Website: https://github.com/Bystroushaak/DHTMLParser

class HTMLElement;
    Container for parsed html elements.

    HTMLElement[] childs;
        Nested tags. Encapsulation would complicate whole class much more then public property.

    string[string] params;
        Tag parameters.

    this();
        Useful as container for document (root of the DOM).

    this(string str);
        Standard constructor used when parsing document from string.

    this(string tagname, string[string] params);
        Special constructor used when creating DOM.

    this(string tagname, string[string] params, HTMLElement[] childs);
        This constructor is used for creating DOM from elements.

        Example:

         HTMLElement e = new HTMLElement([
           new HTMLElement("<val>",[
             new HTMLElement("xe")
           ])
         ]);

         writeln(e);

        Writes;

         <val>
          xe
         </val>

    this(string tagname, HTMLElement[] childs);
        Same as previous, but with less options.

    this(HTMLElement[] childs);
        Same as previous, but with less options.

    HTMLElement[] find(string tag_name, string[string] params = null, bool function(HTMLElement) fn = null);
        Simple search engine.

        Finds elements and subelements which match patterns given by parameters. Allows searching defined by users lambda function.

        Params:
        string tag_name 	Name of searched element.
        string[string] params 	Associative array containing searched parameters
        bool function(HTMLElement) fn 	User defined function. Function takes elements and returns true if wanted.

        Examples:

         import std.stdio;

         HTMLElement dom = parseString("<div id='xe' a='b'>obsah xe divu</div><div id='xu' a='b'>obsah xu divu</div>");

         writeln(dom);

         // writes:
         <div a="b" id="xe">
           obsah xe divu
         </div>
         <div a="b" id="xu">
           obsah xu divu
         </div>

        Search by parameters;

         writeln(dom.find("div", ["id":"xe"]))

         // writes:
         [<div a="b" id="xe">
           obsah xe divu
         </div>
         ]

        Search by lambda function;

         writeln(dom.find(null, null, function(HTMLElement e){return ("id" in e.params && e.params["id"] == "xu");}));

         // writes:
         [<div a="b" id="xu">
           obsah xu divu
         </div>
         ]

        Returns:
        Array of matching elements.

    bool isTag();
        True if element is tag (not content).

    bool isOpeningTag();
        True if is opening tag.

    bool isEndTag();
        True if HTMLElement is end tag (/tag).

    bool isEndTagTo(HTMLElement opener);
        Returns true, if this element is endtag to opener.

    bool isNonPairTag();
        True if HTMLElement is nonpair tag (br for example).

    bool isComment();
        True if HTMLElement is html comment.

    string toString();
        Returns pretiffyied tag with content.

        See Also:
        pretiffy()

    string tagToString();
        Returns tag (with parameters), without content or endtag.

    string getTagName();
        Returns tag name.

    string getContent();
        Returns content of tag (everything between opener and endtag).

    string pretiffy(uint depth = 0, string separator = " ");
        Returns pretiffyied tag with content. Same as toString().

        See Also:
        toString()

static HTMLElement parseString(ref string txt);
    Parse given string and return DOM from HTMLElements.

    See Also:
    HTMLElement

Page generated by Ddoc. This work is licensed under a CC BY (http://creativecommons.org/licenses/by/3.0/) 