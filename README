DHTMLParser 

= What is it? =
	DHTMLParser is lightview parser created for one purpose - quick parsing 
	selected information, when you know where to look.
	
	It is very useful when you writing own API for some page, or checker (script
	that is checking something on the web and alerts when checked information 
	was changed).
	
	If you want, you can also create HTML(XML) documents much more easier than 
	from string.

= How it works? =
	Module have only one important function - parseString(), which takes string
	and returns DOM (Document Object Model) created from HTMLElement objects.
	
	DOM is encapsulated in container - blank HTMLElement, which holds whole DOM
	in .childs property.

= HTMLElement =
|
|++ HTMLElement[] childs
|		If element have any childs, they are stored in this property.
|
|++ string[string] params
|		If element have any parameters, you will find them here.
|
|++ HTMLElement endtag
|		In case that this tag is Opener (<p> for example), in this variable is 
|		link to closing element (</p>).
|
|++ HTMLElement openertag
|		Similar as previous.
|
|-- HTMLElement[] find(string tag_name, string[string] params = null, function fn = null)
|		One of the most importants methods, which allow queries to DOM.
|
|		Lets say, that you want every link from page - 'dom.find("a")' will 
|		return array of links.
|
|		You can also specify parameters, or define lambda function which will 
|		find whatever you want.
|
|-- bool isTag()
|		Returns true, if element is tag (closed in <>). Comments aren't tags!
|
|-- bool isOpeningTag()
|
|-- bool isEndTag()
|		Returns true if is closing tag. 
|
|-- bool isEndTagTo(HTMLElement opener)
|		Returns true if this element is end tag </tagname> for given element.
|
|-- bool isNonPairTag()
|		Returns true, if is nonpair tag (<br /> for example).
|
|-- void isNonPairTag(bool isnonpairtag)
|		Setter which allows set that this element is nonpair. 
|
|-- bool isComment()
|		Returns true if element is HTML comment (<!-- -->).
|
|-- string toString()
|		String representation of element, same as prettify().
|
|-- string prettify()
|		Returns prettified HTML output with childs (full document).
|
|-- string tagToString()
|		Returns string representation if tag, without childs.
|
|-- string getTagName()
|		Tagname - <a href="bla"> returns "a".
|
`-- string getContent()
		Childs to string.

= Creating DOM =
	If you want to create DOM from HTMLElements, you can use one of theese 
	constructors:

	HTMLElement()
		Blank element.
	
	HTMLElement("<tag>")
		From string containing tag (only one tag).
	
	HTMLElement("<tag>", ["param":"value"])
		Tag (with or without <>) with parameters defined by dictionary.
	
	These constructors are usefull for creating documents:
	
		HTMLElement("tag", {"param":"value"}, [HTMLElement("<tag1>"), HTMLElement("<tag2>"), ...])
			With specified tag, params and childs.
			
		HTMLElement("tag", [HTMLElement("<tag1>"), HTMLElement("<tag2>"), ...])
			With specified tag and childs.

		HTMLElement([HTMLElement("<tag1>"), HTMLElement("<tag2>"), ...])
			With speicifed childs. Useful for containers.

= Confused? =
	If you don't understand how to use it, look at examples in ./examples/.
	
	If you still have any quoestion, you can write me email to: 
		bystrousak@kitakitsune.org